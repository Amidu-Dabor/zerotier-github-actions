on:
  workflow_dispatch:
  push:

jobs:
  zerotier:
    runs-on: ubuntu-latest
    steps:
      - name: Install ZeroTier Client
        run: |
          echo "Installing ZeroTier Client"
          curl -s https://install.zerotier.com | sudo bash

      - name: Authorize ZeroTier Client
        shell: pwsh
        run: |
          # Get ZeroTier Client information
          $result = sudo zerotier-cli info
          Write-Output "ZeroTier CLI Info: $result"

          # Extract Client ID
          if ($result -match '([a-z0-9]{10})') {
            $ClientId = $matches[0]
            Write-Output "Extracted Client ID: $ClientId"
          } else {
            throw "Failed to extract Client ID from ZeroTier info"
          }

          # Prepare API request parameters
          $networkId = "${{ secrets.ZEROTIER_NETWORKID }}"
          $apiKey = "${{ secrets.ZEROTIER_API_KEY }}"
          $membersUri = "https://api.zerotier.com/api/v1/network/$networkId/member/$ClientId"
          $Headers = @{
            "Authorization" = "Bearer $apiKey"
          }

          # Check if Client ID exists in the network
          try {
            $members = Invoke-RestMethod -Uri $membersUri -Headers $Headers -Method Get
            $existingMember = $members.id -eq $ClientId
          } catch {
            Write-Output "Failed to retrieve member information. Status Code: $_.Exception.Response.StatusCode"
            Write-Output $_.Exception.Message
            $existingMember = $false
          }

          if ($existingMember) {
            Write-Output "Client ID $ClientId already exists in the network. Skipping join step."
          } else {
            Write-Output "Client ID $ClientId does not exist in the network. Joining network."
            # Join the network
            sudo zerotier-cli join $networkId

            # Authorize the client
            $Body = @{
              config = @{
                authorized = $true
              }
            } | ConvertTo-Json

            Write-Output "Authorizing Client ID $ClientId"
            Invoke-RestMethod -Uri $membersUri -Headers $Headers -Body $Body -Method Post
          }

      - name: Get the Github Actions runner's IP address
        shell: pwsh
        run: curl ifconfig.co

      - name: Test Github Actions Connectivity to VPC-Router on Zerotier network
        shell: pwsh
        run: |
          ping -c 10 192.168.196.98

      - name: Test Github Actions Connectivity to EC2(Router) Private IPv4 Address in AWS VPC
        shell: pwsh
        run: |
          ping -c 10 10.98.10.59



# Unused Code

# ConvertTo-SecureString -AsPlainText -Force String
# $membersUri = 'https://api.zerotier.com/api/v1/network/$networkId/member/{0}' -f $ClientId (This is .NET string formatting)

# Check if Client ID exists in the network
# $members = Invoke-RestMethod -Uri $membersUri -Headers $Headers -Method Get
# $existingMember = $members | Where-Object { $_.nodeId -eq $ClientId }